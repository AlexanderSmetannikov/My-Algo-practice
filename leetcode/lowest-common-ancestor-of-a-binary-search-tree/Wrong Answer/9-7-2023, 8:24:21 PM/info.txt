{"id":1043229916,"lang":"cpp","lang_name":"C++","time":"5 days, 19 hours","timestamp":1694107461,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1043229916/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    pair<int, TreeNode*> level(TreeNode* root, TreeNode* find) {\n        int lvl = 0;\n        TreeNode* minimum = root;\n        TreeNode* ptr = root;\n        while (ptr != find) {\n            if (ptr -> val < minimum -> val) minimum = ptr;\n            if (ptr -> val > find -> val) ptr = ptr -> left;\n            else ptr = ptr -> right;\n            lvl++;\n        }\n        if (ptr -> val < minimum -> val) minimum = ptr;\n        return make_pair(lvl, minimum);\n    }\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        TreeNode* ptr = root;\n        TreeNode* ans;\n        pair<int, TreeNode*> ans1 = level(root, p);\n        pair<int, TreeNode*> ans2 = level(root, q);\n        cout << ans1.first << \" \" << ans1.second -> val << endl;\n        cout << ans2.first << \" \" << ans2.second -> val << endl;\n\n        if (ans1.first < ans2.first) return ans1.second;\n        else return ans2.second;\n    }\n};","compare_result":"111111101111111101111100000010","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}