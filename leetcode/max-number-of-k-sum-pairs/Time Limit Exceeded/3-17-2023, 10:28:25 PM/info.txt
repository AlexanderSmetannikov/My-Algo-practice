{"id":917055803,"lang":"cpp","lang_name":"C++","time":"5 months, 4 weeks","timestamp":1679081305,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/917055803/","is_pending":"Not Pending","title":"Max Number of K-Sum Pairs","memory":"N/A","code":"class Solution {\npublic:\n\n    typedef struct {\n        int val;\n        int count;\n    } num_pair;\n\n    int is_in(vector<num_pair>& pairs, int k) {\n        for (int i = 0; i < pairs.size(); i++) \n            if (pairs[i].val == k) return i;\n        return -1;\n    }\n\n    int maxOperations(vector<int>& nums, int k) {\n        int ans = 0;\n            sort(nums.begin(), nums.end());\n            vector<num_pair> pairs;\n            int index = 0;\n            for (int i = 0; i < nums.size() && nums[i] < k; i++) {\n                index = is_in(pairs, nums[i]);\n                if (index == -1) pairs.push_back({nums[i], 1});\n                else pairs[index].count++;\n            }\n\n            // for (int i = 0; i < pairs.size(); i++) printf(\"val: %d count: %d\\n\", pairs[i].val, pairs[i].count);\n            for (int i = 0; i < pairs.size(); i++) {\n                if ( (index = is_in( pairs, (k - pairs[i].val) ) ) != -1) {\n                    ans += min(pairs[i].count, pairs[index].count);\n                }\n            }\n\n\n        return ans / 2;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"max-number-of-k-sum-pairs","has_notes":false,"flag_type":1}