{"id":896746387,"lang":"cpp","lang_name":"C++","time":"7Â months","timestamp":1676231165,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/896746387/","is_pending":"Not Pending","title":"Min Stack","memory":"16.4 MB","code":"/*\n    Design stack that supports push, pop, top, & retriving min element\n    \n    2 stacks, 1 normal & 1 monotonic decr, only push if lower than top\n    \n    Time: O(1)\n    Space: O(n)\n*/\n\nclass MinStack {\npublic:\n    MinStack() {\n        \n    }\n    \n    void push(int val) {\n        stk.push(val);\n        \n        if (minStk.empty() || val < minStk.top().first) {\n            minStk.push({val, 1});\n        } else if (val == minStk.top().first) {\n            minStk.top().second++;\n        }\n    }\n    \n    void pop() {\n        if (stk.top() == minStk.top().first) {\n            minStk.top().second--;\n            if (minStk.top().second == 0) {\n                minStk.pop();\n            }\n        }\n        stk.pop();\n    }\n    \n    int top() {\n        return stk.top();\n    }\n    \n    int getMin() {\n        return minStk.top().first;\n    }\nprivate:\n    stack<int> stk;\n    stack<pair<int, int>> minStk;\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack* obj = new MinStack();\n * obj->push(val);\n * obj->pop();\n * int param_3 = obj->top();\n * int param_4 = obj->getMin();\n */","compare_result":"1111111111111111111111111111111","title_slug":"min-stack","has_notes":false,"flag_type":1}